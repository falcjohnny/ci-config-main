#
# Checkout devstack using git
#
- builder:
    name: devstack-checkout
    builders:
      - shell: |
          #!/bin/bash -xe
          if [[ ! -e devstack-gate ]]; then
              git clone git://git.openstack.org/openstack-infra/devstack-gate
          else
              cd devstack-gate
              git remote set-url origin git://git.openstack.org/openstack-infra/devstack-gate
              git remote update
              git reset --hard
              if ! git clean -x -f ; then
                  sleep 1
                  git clean -x -f
              fi
              git checkout master
              git reset --hard remotes/origin/master
              if ! git clean -x -f ; then
                  sleep 1
                  git clean -x -f
              fi
              cd ..
          fi
#
# Checkout devstack using http
# 
- builder:
    name: devstack-checkout-http
    builders:
      - shell: |
          #!/bin/bash -xe
          if [[ ! -e devstack-gate ]]; then
              git clone http://git.openstack.org/openstack-infra/devstack-gate
          else
              cd devstack-gate
              git remote set-url origin http://git.openstack.org/openstack-infra/devstack-gate
              git remote update
              git reset --hard
              if ! git clean -x -f ; then
                  sleep 1
                  git clean -x -f
              fi
              git checkout master
              git reset --hard remotes/origin/master
              if ! git clean -x -f ; then
                  sleep 1
                  git clean -x -f
              fi
              cd ..
          fi
#
# Print logs link in console output
#
- builder:
    name: link-logs
    builders:
      - shell: |
          #!/bin/sh
          # TODO: Update these links if using a different gerrit server
          echo "Triggered by: https://review.openstack.org/$ZUUL_CHANGE patchset $ZUUL_PATCHSET"

          # TODO: Update this link to point to your log server
          echo "Detailed logs: http://openstack.falconstor.com/$LOG_PATH/"
#
# Upload logs after job finishes
#
- publisher:
    name: console-log
    publishers:
      - scp:
          site: 'LogServer'
          files:
            - target: 'logs/$LOG_PATH'
              copy-console: true
              copy-after-failure: true
#
# Upload logs after job finishes
#
- publisher:
    name: devstack-logs
    publishers:
      - scp:
          site: 'LogServer'
          files:
            - target: 'logs/$LOG_PATH'
              source: 'logs/**'
              keep-hierarchy: true
              copy-after-failure: true
#
# Print network info in console output
#
- builder:
    name: net-info
    builders:
      - shell: |
          #!/bin/sh
          export PATH=$PATH:/sbin
          echo "Network interface addresses..."
          ip address show
          echo "Network routing tables..."
          ip route show
          ip -6 route show
          echo "Network neighbors..."
          ip neighbor show
#
# Define pre-test hook that does NOT download our driver separately
# Use for tests where our driver is already included in upstream repo
#
- builder:
    name: pretest-hook-upstream-driver
    builders:
      - shell: |
          #!/bin/bash -xe
          function pre_test_hook {{

          echo "Configure the local.conf file to properly setup FalconStor driver in cinder.conf"
          cat <<EOF >$BASE/new/devstack/local.conf

          [[post-config|\$CINDER_CONF]]
          [DEFAULT]
          enabled_backends=FSS
          default_volume_type=FSSISCSIDriver

          [FSS]
          volume_driver=cinder.volume.drivers.falconstor.iscsi.FSSISCSIDriver
          volume_backend_name=FSSISCSIDriver
          # TODO Update these values if the FSS being used for CI changes
          san_login=root
          san_password=IPStor101
          san_ip=192.168.2.22
          fss_pool=1

          # Use post-extra because the tempest configuration file is
          # overwritten with the .sample after post-config.
          [[post-extra|\$TEMPEST_CONFIG]]
          [volume]
          storage_protocol=iSCSI
          vendor_name=FalconStor
          build_timeout=600
          [volume-feature-enabled]
          backup=false
          EOF

          echo "Configure localrc file to properly setup CINDER_ENABLED_BACKENDS"
          cat <<EOF >>$BASE/new/devstack/localrc
          CINDER_ENABLED_BACKENDS=FSS:FSSISCSIDriver
          ATTACH_ENCRYPTED_VOLUME_AVAILABLE=False
          EOF

          }}

          export -f pre_test_hook
#
# Define pre-test hook that downloads our driver from some custom URL
# Use for tests where our driver is not yet merged upstream, or we want
# to test some new driver code that overrides the upstream driver code
#
- builder:
    name: pretest-hook-custom-driver
    builders:
      - shell: |
          #!/bin/bash -xe
          function pre_test_hook {{

          echo "Configure the local.conf file to properly setup FalconStor driver in cinder.conf"
          cat <<EOF >$BASE/new/devstack/local.conf

          [[post-config|\$CINDER_CONF]]
          [DEFAULT]
          enabled_backends=FSS
          default_volume_type=FSSISCSIDriver

          [FSS]
          volume_driver=cinder.volume.drivers.falconstor.iscsi.FSSISCSIDriver
          volume_backend_name=FSSISCSIDriver
          # TODO Update these values if the FSS being used for CI changes
          san_login=root
          san_password=IPStor101
          san_ip=192.168.2.22
          fss_pool=1

          # Use post-extra because the tempest configuration file is
          # overwritten with the .sample after post-config.
          [[post-extra|\$TEMPEST_CONFIG]]
          [volume]
          storage_protocol=iSCSI
          vendor_name=FalconStor
          build_timeout=600
          [volume-feature-enabled]
          backup=false
          EOF

          echo "Configure localrc file to properly setup CINDER_ENABLED_BACKENDS"
          cat <<EOF >>$BASE/new/devstack/localrc
          CINDER_ENABLED_BACKENDS=FSS:FSSISCSIDriver
          ATTACH_ENCRYPTED_VOLUME_AVAILABLE=False
          EOF

          echo "Downloading latest driver from private repository"
          cd $BASE/new/cinder/cinder/volume/drivers
          rm -rf falconstor
          mkdir falconstor
          chmod 0755 falconstor
          cd $BASE/new/cinder/cinder/volume/drivers/falconstor
          wget https://raw.githubusercontent.com/falcopenstack/cinder/newfalcdriver/cinder/volume/drivers/falconstor/__init__.py
          wget https://raw.githubusercontent.com/falcopenstack/cinder/newfalcdriver/cinder/volume/drivers/falconstor/iscsi.py
          wget https://raw.githubusercontent.com/falcopenstack/cinder/newfalcdriver/cinder/volume/drivers/falconstor/rest_proxy.py
          chmod 0644 *.py

          }}
#
# Run devstack-gate to start the test
# This should be called after defining the pre-test hook
#
- builder:
    name: run-devstack-gate
    builders:
      - shell: |
          #!/bin/bash -xe
          # To keep our CINDER_ENABLED_BACKENDS configuration in localrc
          export KEEP_LOCALRC=true

          export PYTHONUNBUFFERED=true
          export DEVSTACK_GATE_TIMEOUT=300
          export DEVSTACK_GATE_TEMPEST=1
          export TEMPEST_CONCURRENCY=1
          export DEVSTACK_GATE_NEUTRON=1
          echo "Disable test_shelve_volume because it fails due to SSH timeout (Bug 1298472)"
          export 'DEVSTACK_GATE_TEMPEST_REGEX=^(?=.*volume)(?!.*boto)(?!.*test_volume_boot_pattern)(?!.*test_minimum_basic_scenario)(?!.*test_shelve_volume).*'

          export GIT_BASE="https://review.openstack.org/p"

          if [ -z $ZUUL_PROJECT ]; then
              export ZUUL_PROJECT=openstack-dev/ci-sandbox
          fi
          if [ -z $ZUUL_BRANCH ]; then
              export ZUUL_BRANCH=master
          fi

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh
